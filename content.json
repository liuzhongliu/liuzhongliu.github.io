[{"title":"给宝宝的摄影教程","date":"2018-01-18T06:48:00.000Z","path":"2018/01/18/photograph/","text":"世界上不缺乏美，而是缺乏一双发现美的眼睛，以及一张留下瞬间之美的照片。 我初学摄影的时候也只会用自动对焦拍一些简单的照片，有些杂乱不堪，有些曝光过度。但这并不是毫无意义的，做任何事情我们都要去积累，去思考。摄影不只是简单地拍照片记录影像，而是综合美学、光学和心理学的一们技术，是一种艺术创作，有时候一张照片就是一个故事。 一、初学工欲善其事，必先利其器。想学好摄影，必须先要了解你的摄影器材。 1、镜头首先，一个单反最重要的就是它的镜头。我们先来认识一下单反镜头的一些参数。（基础知识）单反镜头的参数辨别 2、专业术语如果你不了解其中的一些专业术语，可以先在这里学习一下摄影的基础知识：摄影基础知识入门。 我这里也简单讲一些基本的术语帮助你理解： 光圈：用来控制镜头通光量大小的装置。光圈越大，进光量就越大，照片就越亮。光圈大小用f值表示，如： f/1 , f/1.4 , f/2 , f/2.8 , f/4 , f/5.6 , f/8等等。（f值越小，光圈越大） 快门：用来控制曝光时间长短的装置。 快门速度：速度越快，光进入相机就越少，拍出来的照片就暗一点，所以晚上摄影需要用低速快门。同时，低速快门也可以用来拍水流，会有很神奇的效果。快门速度用“1/30”表示，指曝光时间为1/30秒，而“1/60”就是“1/30”速度两倍，以此类推。 景深：焦点相当清晰的这段从前到后的距离。 光圈越小，景深越大；光圈越大，景深越小。焦距越短，景深越大；焦距越长，景深越小。举个例子，如果你想拍人像时背景越模糊，景深就要小，焦距就要尽量长，光圈尽量大。 影响照片效果最直接的体现基础就是曝光，曝光也与很多基础参数有关，详细的可以看这篇文章：曝光。 想要学好摄影，也得学会模仿、学习、欣赏其他人作品，学习摄影的网站：高高手、蜂鸟网、Eput、图虫网、POCO、500px、堆糖 要牢记摄影入门的两个重要因素——稳（镜头不能晃动，可以利用身体部位或者其他建筑设施固定）和光（光线充足，拍摄最佳时间早上十点）。","comments":true,"tags":[{"name":"随笔","slug":"随笔","permalink":"http://liuxiaoyu.cc/tags/随笔/"},{"name":"摄影","slug":"摄影","permalink":"http://liuxiaoyu.cc/tags/摄影/"}]},{"title":"markdown简介","date":"2017-07-14T02:43:00.000Z","path":"2017/07/14/markdown/","text":"概述 Markdown 的目标是实现「易读易写」。 可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。 总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像强调。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。 一、Markdown的优点 专注你的文字内容而不是排版样式，安心写作。 轻松的导出 HTML、PDF 和本身的 .md 文件。 纯文本内容，兼容所有的文本编辑器与字处理软件。 随时修改你的文章版本，不必像字处理软件生成若干文件版本导致混乱。 可读、直观、学习成本低。 二、特殊字符自动转换在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &amp;lt; 和 &amp;amp;。Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 &amp; 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 &amp;amp;。所以你如果要在文档中插入一个版权符号 ©，你可以这样写：&amp;copy;Markdown 会保留它不动。而若你写：AT&amp;TMarkdown 就会将它转为：AT&amp;amp;T类似的状况也会发生在 &lt; 符号上，因为 Markdown 允许 兼容 HTML ，如果你是把 &lt; 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：4 &lt; 5Markdown 将会把它转换为：4 &amp;lt; 5不过需要注意的是，code 范围内，不论是行内还是区块， &lt; 和 &amp; 两个符号都一定会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 &lt; 和 &amp; 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。） 三、常用语法最常见的Markdown格式选项和键盘快捷键 : 标题标题能显示出文章的结构。行首插入1-6个 # ，每增加一个 # 表示更深入层次的内容，对应到标题的深度由 1-6 阶。123456H1 :# Header 1H2 :## Header 2H3 :### Header 3H4 :#### Header 4H5 :##### Header 5H6 :###### Header 6 文本样式（带“*”星号的文本样式，在原版Markdown标准中不存在，但在其大部分衍生标准中被添加） 1234567891011链接 :[Title](URL)加粗 :**Bold**斜体字 :*Italics**删除线 :~~text~~*高亮 :==text==段落 : 段落之间空一行换行符 : 一行结束时输入两个空格列表 :* 添加星号成为一个新的列表项。引用 :&gt; 引用内容内嵌代码 : `alert(&apos;Hello World&apos;);`画水平线 (HR) :-------- 图片使用Markdown将图像插入文章，你需要在Markdown编辑器输入 ![]()。 这时在预览面板中会自动创建一个图像上传框。你可以从电脑桌面拖放图片(.png, .gif, .jpg)到上传框, 或者点击图片上传框使用标准的图像上传方式。 如果你想通过链接插入网络上已经存在的图片，只要单击图片上传框的左下角的“链接”图标，这时就会呈现图像URL的输入框。想给图片添加一个标题, 你需要做的是将标题文本插图中的方括号，e.g;![This is a title](). 脚注脚注不存在于标准Markdown中。 使用这样的占位符号可以将脚注添加到文本中:[^1]. 另外，你可以使用“n”而不是数字的[^n]所以你可以不必担心使用哪个号码。在您的文章的结尾，你可以如下图所示定义匹配的注脚，URL将变成链接: 12345[^1]: This is my first footnote[^n]: Visit http://example.com[^n]: A final footnote 写代码添加内嵌代码可以使用一对回勾号`alert(‘Hello World’)`.对于插入代码, Ghost支持标准的Markdown代码和GitHub Flavored Markdown (GFM)。标准Markdown基于缩进代码行或者4个空格位: 123&lt;header&gt; &lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;&lt;/header&gt; GFM 使用三个回勾号： 例子链接This is a paragraph that contains a [link to example]() 列表格式1234This paragraph contains a list of items.* Item 1* Item 2* Item three 使用Markdown 引用文本： 1234This paragraph has a quote&gt; That is pulled out like thisfrom the text my post.","comments":true,"tags":[{"name":"markdown","slug":"markdown","permalink":"http://liuxiaoyu.cc/tags/markdown/"},{"name":"随笔","slug":"随笔","permalink":"http://liuxiaoyu.cc/tags/随笔/"}]},{"title":"免费用hexo+github搭建个人博客","date":"2017-07-08T06:48:00.000Z","path":"2017/07/08/hexo+github/","text":"关于如何用github+hexo来搭建个人博客，网上也有很多教程，我觉得关键的部分在于git命令行的运用和_config.yml文件的配置。 下面是hexo常用的命令： hexo安装npm install hexo -g #安装npm update hexo -g #升级hexo init #初始化 简写hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章hexo p == hexo publishhexo g == hexo generate#生成hexo s == hexo server #启动服务预览hexo d == hexo deploy#部署 服务器hexo server #Hexo会监视文件变动并自动更新，您无须重启服务器。hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IP hexo clean #清除缓存 网页正常情况下可以忽略此条命令hexo g #生成静态网页hexo d #开始部署 监视文件变动hexo generate #使用 Hexo 生成静态文件快速而且简单hexo generate --watch #监视文件变动 完成后部署两个命令的作用是相同的hexo generate --deployhexo deploy --generatehexo deploy -ghexo server -g 草稿hexo publish [layout] &lt;title&gt; 模版hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）hexo deploy #将.deploy目录部署到GitHub hexo new [layout] &lt;title&gt;hexo new photo &quot;My Gallery&quot;hexo new &quot;Hello World&quot; --lang tw 写作hexo new page &lt;title&gt;hexo new post &lt;title&gt; 推送到服务器上hexo n #写文章hexo g #生成hexo d #部署 #可与hexo g合并为 hexo d -g 报错 找不到git部署ERROR Deployer not found: git解决方法npm install hexo-deployer-git --save 部署类型设置githexo 3.0 部署类型不再是github，_config.yml 中修改 xcodebuildxcode-select: error: tool ‘xcodebuild’ requires Xcode, but active developer directory ‘/Library/Developer/CommandLineTools’ is a command line tools instance npm install bcrypt RSS不显示安装RSS插件npm install hexo-generator-feed --save 开启RSS功能编辑hexo/_config.yml，添加如下代码：rss: /atom.xml #rss地址 默认即可 开启评论 1.我使用多说代替自带的评论，在多说 网站注册 &gt; 后台管理 &gt; 添加新站点 &gt; 工具 === 复制通用代码 里面有 short_name 在根目录 “_config.yml” 添加一行 disqus_shortname: jslite 是在多说注册时产生的复制到 themes\\landscape\\layout\\_partial\\article.ejs把1234567&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;&lt;section id=&quot;comments&quot;&gt;&lt;div id=&quot;disqus_thread&quot;&gt; &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;//disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;&lt;/div&gt;&lt;/section&gt;&lt;% &#125; %&gt; 改为1234567891011121314151617181920&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt; &lt;section id=&quot;comments&quot;&gt; &lt;!-- 多说评论框 start --&gt; &lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;&quot; data-title=&quot;&lt;%= post.title %&gt;&quot; data-url=&quot;&lt;%= page.permalink %&gt;&quot;&gt;&lt;/div&gt; &lt;!-- 多说评论框 end --&gt; &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt; &lt;script type=&quot;text/javascript&quot;&gt; var duoshuoQuery = &#123;short_name:&apos;&lt;%= config.disqus_shortname %&gt;&apos;&#125;; (function() &#123; var ds = document.createElement(&apos;script&apos;); ds.type = &apos;text/javascript&apos;;ds.async = true; ds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;; ds.charset = &apos;UTF-8&apos;; (document.getElementsByTagName(&apos;head&apos;)[0] || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds); &#125;)(); &lt;/script&gt; &lt;!-- 多说公共JS代码 end --&gt; &lt;/section&gt;&lt;% &#125; %&gt;","comments":true,"tags":[{"name":"hexo","slug":"hexo","permalink":"http://liuxiaoyu.cc/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://liuxiaoyu.cc/tags/github/"},{"name":"博客","slug":"博客","permalink":"http://liuxiaoyu.cc/tags/博客/"}]},{"title":"你好，世界!","date":"2017-07-06T19:21:00.000Z","path":"2017/07/07/helloworld/","text":"HELLO WORLD!初体验大学那会儿刚学C语言，大虎教我们的第一行代码就是： 1print(\"Hello World!\"); 这个经典的程序员问候语，在我心里像一个baby一样呱呱坠地了。以前懒，上C语言的时候中途漏了一节课，后面就基本打酱油了，考完试将将及格，还总说是老师教得不好，现在想想真是图样图森破，编程这种事，不热爱是没办法学好的。总之，这也算是我的编程入门课了。后来上小马哥的网络教学平台设计，用Discuz建站，开始接触到世界上最好的语言——PHP（手动滑稽），这时候我开始对建站有些兴趣，总想建一个自己的博客网站，于是在图书馆借了很多书，比如《21天学会。。。》系列，还有《asp+mysql》等，结果只学到写一个静态网页就草草结束了（以前我做啥都三分钟热度）。 若即若离记得上大一还是大二的时候，那时候HTML5和产品经理的概念在国内渐渐流行起来（暴露年龄了），老师也提到过，但自己那时候啥也不懂，三观都没成形，更没有所谓的技术敏感度。在大三的时候学业不精的我，在经历学长学姐毕业季的时候终于意识到——哦，原来我还有一年就要进入社会开始工作了，可我还什么都不会呀（那时候没打算考研，现在想想也并不后悔），于是开始搜，什么职业赚的多还容易入门，看到产品经理这个职位和我们专业所学的知识还挺对口，而且没什么太大门槛，于是我又在图书馆借了一本书叫《人人都是产品经理》，想必很多人都听过或者看过，看完这本书我更迷茫了，自己也没什么项目经验， 开始刚毕业那会儿之前一直是用Wordpress来搭建博客，买了一年的虚拟主机服务，当时也是图方便，搭建起来也不费事，后来发现自己也没怎么去更新博客内容，一年时间到期了，也没个备份，最后弄得文章都丢了，还好在印象笔记里还有些存货，但都和技术没什么相关性，是些读书的文章。于是，这个博客就诞生了，它的主要功能是为我写一些技术博客提供个性化的渠道。 回炉重造且看下回分解","comments":true,"tags":[{"name":"随笔","slug":"随笔","permalink":"http://liuxiaoyu.cc/tags/随笔/"}]}]